from tkinter import *
from tkinter import ttk
from PIL import Image, ImageTk
from tkinter import messagebox
import mysql.connector
from time import strftime
from datetime import datetime
import cv2
import os


class FaceRecognition:
    def __init__(self, root):
        self.root = root
        self.root.geometry("1550x790+0+0")
        self.root.title("Face Recognition System")

        # Load background image
        img = Image.open(r"/Users/abisheek/Desktop/face regonination project/images/fusion-08.jpeg")
        img = img.resize((1800, 1100))
        self.photoimg = ImageTk.PhotoImage(img)

        bg_label = Label(self.root, image=self.photoimg)
        bg_label.place(x=0, y=0, width=1800, height=1100)

        # Title Label
        title_lbl = Label(bg_label, text="FACE RECOGNITION", font=("times new roman", 50, "bold"), fg="black")
        title_lbl.place(x=330, y=40, width=1000, height=100)

        # Start Button
        start_btn = Button(
            bg_label, text="START FACE RECOGNITION", cursor="hand2", command=self.face_recog,
            font=("times new roman", 25, "bold"), fg="black"
        )
        start_btn.place(x=0, y=600, width=1700, height=80)

    # Mark attendance
    def mark_attendance(self, student_id, name, student_class, roll_no):
        with open("schoolattendance.csv", "r+", newline="\n") as f:
            mydatalist = f.readlines()
            name_list = []
            for line in mydatalist:
                entry = line.split(",")
                name_list.append(entry[0])

            if student_id not in name_list:
                now = datetime.now()
                d1 = now.strftime("%d/%m/%Y")
                dtstring = now.strftime("%H:%M:%S")
                f.writelines(f"\n{student_id},{name},{student_class},{roll_no},{dtstring},{d1},Present")

    def face_recog(self):
        def draw_boundary(img, classifier, scaleFactor, minNeighbors, clf):
            gray_image = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            features = classifier.detectMultiScale(gray_image, scaleFactor, minNeighbors)

            for (x, y, w, h) in features:
                cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 0), 3)
                id, predict = clf.predict(gray_image[y:y + h, x:x + w])
                confidence = int((100 * (1 - predict / 300)))

                print(f"Predicted ID: {id}, Confidence: {confidence}")

                if confidence > 60:  # Lowered threshold for testing
                    try:
                        conn = mysql.connector.connect(
                            host="localhost", username="root", password="23082024abi", database="face_regonination_project"
                        )
                        my_cursor = conn.cursor()

                        # Fetch data from database
                        my_cursor.execute("SELECT NAME, CLASS, ROLLNO, STUDENTID FROM student WHERE STUDENTID = %s", (id,))
                        result = my_cursor.fetchone()
                        if result:
                            name, student_class, roll_no, student_id = result

                            # Display on the frame
                            cv2.putText(img, f"NAME: {name}", (x, y - 55), cv2.FONT_HERSHEY_COMPLEX, 0.8, (255, 255, 255), 3)
                            cv2.putText(img, f"CLASS: {student_class}", (x, y - 30), cv2.FONT_HERSHEY_COMPLEX, 0.8, (255, 255, 255), 3)
                            cv2.putText(img, f"ROLLNO: {roll_no}", (x, y - 5), cv2.FONT_HERSHEY_COMPLEX, 0.8, (255, 255, 255), 3)
                            cv2.putText(img, f"STUDENTID: {student_id}", (x, y - 80), cv2.FONT_HERSHEY_COMPLEX, 0.8, (255, 255, 255), 3)

                            # Mark attendance
                            self.mark_attendance(student_id, name, student_class, roll_no)
                        else:
                            cv2.putText(img, "UNKNOWN FACE", (x, y - 5), cv2.FONT_HERSHEY_COMPLEX, 0.8, (255, 255, 255), 3)

                    except mysql.connector.Error as e:
                        print(f"Database error: {e}")
                    finally:
                        if conn.is_connected():
                            conn.close()
                else:
                    cv2.rectangle(img, (x, y), (x + w, y + h), (0, 0, 255), 3)
                    cv2.putText(img, "UNKNOWN FACE", (x, y - 5), cv2.FONT_HERSHEY_COMPLEX, 0.8, (255, 255, 255), 3)

        def recognize(img, clf, faceCascade):
            draw_boundary(img, faceCascade, 1.1, 10, clf)
            return img

        # Load classifier
        faceCascade = cv2.CascadeClassifier("/Users/abisheek/Desktop/face regonination project/haarcascade_frontalface_default.xml")
        clf = cv2.face.LBPHFaceRecognizer_create()
        clf.read("classifier.xml")

        video_cap = cv2.VideoCapture(0)

        while True:
            ret, img = video_cap.read()
            if not ret:
                print("Failed to grab frame.")
                break

            img = recognize(img, clf, faceCascade)
            cv2.imshow("FACE RECOGNITION", img)

            # Exit on pressing 'z'
            if cv2.waitKey(1) & 0xFF == ord('z'):
                print("Video capture ended.")
                break

        video_cap.release()
        cv2.destroyAllWindows()


if __name__ == "__main__":
    root = Tk()
    obj = FaceRecognition(root)
    root.mainloop()
